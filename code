#include <stdio.h>
#include <stdlib.h>
#include "projects.h"

int main() {
    
    Medico* listaMedicos = cria_medico();
    Paciente* listaPaciente = cria_paciente();
    Consultas* listaConsultas = cria_consulta();

    menu(listaMedicos, listaPaciente, listaConsultas);
    return 0;
}

enum AgendadaFlag{
    LIVRE = 0,
    MARCADA,
    REALIZADA,
};

typedef struct Consultas{
    Paciente *paciente;
    Medico *medico;
    int data[2];
    int horario[2];
    int agendadaFlag; // 0 para livre, 1 para marcada, 2 para realizada
    char descricao[MAX_STRING_SIZE];
    struct Consultas *prox;
    struct Consultas *ante;
}Consultas;

Consultas* cria_consulta();
void input_consulta(Consultas* novo_node, Medico* listaMedico, Paciente* listaPaciente);
Consultas* insere_consulta(Consultas* l, Medico* listaMedico, Paciente* listaPaciente);
void listar_consultas(Consultas* l, Medico* listaMedico, Paciente* listaPaciente);

void string_to_upper(char *str);
void get_string(const char *pergunta, char *destino, int tamanho);
int get_int(const char *pergunta);


typedef struct Medico{
    char crm[MAX_STRING_SIZE];
    char nome[MAX_STRING_SIZE];
    char telefone[MAX_STRING_SIZE];
    char especialidade[MAX_STRING_SIZE];
    struct Medico *prox;
    struct Medico *ante;
} Medico;

Medico* cria_medico();
Medico* insere_medico(Medico* lista);
void imprime_medicos(Medico* lista);
Medico* procura_medico(Medico* lista, char* nome);

void menu(Medico* medicos, Paciente* pacientes, Consultas* consultas);

typedef struct Paciente{
    char cpf[MAX_STRING_SIZE];
    char nome[MAX_STRING_SIZE];
    char telefone[MAX_STRING_SIZE];
    struct Paciente *prox;
    struct Paciente *ante;
} Paciente;

Paciente* cria_paciente();
Paciente* insere_paciente(Paciente *lista);
void imprime_pacientes(Paciente *lista);
Paciente* procura_paciente(Paciente* lista, char *cpf);


enum Status{
    INSERIR_MEDICO = 1,
    LISTAR_MEDICOS,
    INSERIR_PACIENTE,
    LISTAR_PACIENTES,
    INSERIR_CONSULTA
};

#include "pacientes.h"
#include "medicos.h"
#include "consultas.h"
#include "lista.h"
#include "menu.h"
#include "helpers.h"

Consultas* cria_consulta(){
    return NULL;
}

void input_consulta(Consultas* novo_node, Medico* listaMedico, Paciente* listaPaciente){
    printf("Criando consulta...\n");
    char buffer[MAX_STRING_SIZE];
    get_string("Insira o nome do médico: \n", buffer, MAX_STRING_SIZE);
    string_to_upper(buffer);
    Medico* medico_da_consulta = procura_medico(listaMedico, buffer);
    if(medico_da_consulta == NULL){
        printf("Médico não encontrado, confira se digitou o nome corretamente\n");
        return;
    }
    get_string("Insira o CPF do paciente: \n", buffer, MAX_STRING_SIZE);
    Paciente* paciente_da_consulta = procura_paciente(listaPaciente, buffer);
    if(paciente_da_consulta == NULL){
        printf("Paciente não encontrado, confira se digitou o cpf corretamente\n");
        return;
    }
    
}

Consultas* insere_consulta(Consultas* l, Medico* listaMedico, Paciente* listaPaciente){
    Consultas* novo_node;
    novo_node = (Consultas*)malloc(sizeof(Consultas));

    input_consulta(novo_node, listaMedico, listaPaciente);

    novo_node->prox = l;
    novo_node->ante = NULL;

    if(l != NULL)
        l->ante = novo_node;
    return novo_node;
}

void listar_consultas (Consultas* l, Medico* listaMedico, Paciente* listaPaciente) {
    if (l == NULL) {
        printf("Nao ha consultas agendadas.\n");
    }
    while (l != NULL) {
        printf("Impressao das consultas.\n");
        printf("");
    }
}

//Deixa uma string em caixa alta
void string_to_upper(char *str){
    int i = 0;
    while(str[i] != '\0'){
        str[i] = toupper(str[i]);
        i++;
    }
}

//Pede por uma string e padroniza, podemos usar pra sanitizar melhor dps
void get_string(const char *pergunta, char *destino, int tam){
    printf("%s", pergunta);
    if(fgets(destino, tam, stdin)){
        destino[strcspn(destino, "\n")] = '\0';
    }
}

//Pede por uma string e depois transforma pra int, não aceita entrada inválida
int get_int(const char *pergunta){
    char buffer[100];
    int numero;
    char *endptr;

    while(true){
        get_string(pergunta, buffer, MAX_STRING_SIZE);

        numero = strtol(buffer, &endptr, 10);

        if(endptr == buffer || *endptr != '\0')
            printf("Entrada inválida, digite um número inteiro\n");
        else
            return numero;
    }
}Medico* cria_medico() {
    return NULL;
}

Medico* insere_medico(Medico* lista) {
    Medico* novo = (Medico*) malloc(sizeof(Medico));

    printf("\nNovo Medico.\n");
    get_string("Digite o CRM:", novo->crm, MAX_STRING_SIZE);
    get_string("Digite o nome: ", novo->nome, MAX_STRING_SIZE);
    get_string("Digite o telefone: ", novo->telefone, MAX_STRING_SIZE);
    get_string("Digite a especialidade: ", novo->especialidade, MAX_STRING_SIZE);

    novo->prox = lista; 
    novo->ante = NULL; // INSERÇÃO NO INÍCIO DA LISTA

    if (lista != NULL)
        lista->ante = novo;

    return novo;
}

void imprime_medicos(Medico* lista) {
    if (lista != NULL) {
        printf("\nImpressão dos médicos.\n");
        int cont = 1;
        while (lista != NULL) {
            printf("Medico %d.\n", cont);
            printf("CRM: %s.\n", lista->crm);
            printf("Nome: %s.\n", lista->nome);
            printf("Telefone: %s.\n", lista->telefone);
            printf("Especialidade: %s.\n", lista->especialidade);
            lista = lista->prox;
            cont++;
        }
    } else
        printf("Lista de médicos vazia.\n");
    printf("\n");
}

Medico* procura_medico(Medico* lista, char *nome){
    char buffer[MAX_STRING_SIZE];
    Medico* p = lista;
    while(p != NULL){
        strcpy(buffer, p->nome);
        string_to_upper(buffer);
        if(strcmp(buffer, nome) == 0){
            return p;
        }
        p = p->prox;
    }
    return NULL;
}

void menu(Medico* medicos, Paciente* pacientes, Consultas* consultas) {
    int aux=1;

    while (aux!=0) {

        printf("\nMenu.\n");
        printf("1. Inserir medico\n");
        printf("2. Listar medicos\n");
        printf("3. Inserir paciente\n");
        printf("4. Listar pacientes\n");
        printf("5. Inserir consulta\n");
        printf("0. Sair\n");
        aux = get_int("Escolha uma opção: ");

        switch (aux)
        {
        case INSERIR_MEDICO:
            medicos = insere_medico(medicos);
            break;
        case LISTAR_MEDICOS:
            imprime_medicos(medicos);
            break;
        case INSERIR_PACIENTE:
            pacientes = insere_paciente(pacientes);
            break;
        case LISTAR_PACIENTES:
            imprime_pacientes(pacientes);
            break;
        case INSERIR_CONSULTA:
            insere_consulta(consultas, medicos, pacientes);
        default:
            printf("Opção inválida.");
            break;
        }
    }
}

Paciente* cria_paciente(){
    return NULL;
}

Paciente* insere_paciente(Paciente *lista){
    Paciente* novo = (Paciente*)malloc(sizeof(Paciente));

    printf("\nNovo Paciente.\n");
    get_string("Digite o nome: ", novo->nome, MAX_STRING_SIZE);
    get_string("Digite o CPF: ", novo->cpf, MAX_STRING_SIZE);
    get_string("Digite o telefone: ", novo->telefone, MAX_STRING_SIZE);

    novo->prox = lista;
    novo->ante = NULL;

    if(lista != NULL)
        lista->ante = novo;
    
    return novo;
}

void imprime_pacientes(Paciente* lista){
    if(lista != NULL){
        printf("\nImpressão dos pacientes.\n");
        int cont = 1;
        while(lista != NULL){
            printf("Paciente %d.\n", cont);
            printf("CPF: %s.\n", lista->cpf);
            printf("Nome: %s.\n", lista->nome);
            printf("Telefone: %s.\n", lista->telefone);
            lista = lista->prox;
            cont++;
        }
    }
    else
        printf("Lista de pacientes vazia.\n");
}

Paciente* procura_paciente(Paciente* lista, char *cpf){
    Paciente* p = lista;
    while(p != NULL){
        if(strcmp(p->cpf, cpf) == 0){
            return p;
        }
        p = p->prox;
    }
    return NULL;
}